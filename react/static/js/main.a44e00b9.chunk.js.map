{"version":3,"sources":["ProductList/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["ProductList","props","state","iteration","logs","products","wereLogsCleared","this","timeDifference","performance","now","startTime","Math","ceil","timer","setTimeout","setState","clearTimeout","productAmount","axios","get","response","data","productRender","map","product","index","className","key","src","image","alt","id","name","description","logsRender","log","length","onClick","getProducts","clearLogs","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a44e00b9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './ProductList.css';\r\n\r\nclass ProductList extends Component {\r\n\tstate = {\r\n\t\titeration: 0,\r\n\t\tlogs: [],\r\n\t\tproducts: [],\r\n\t};\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.iteration = -1;\r\n\t\tthis.wereLogsCleared = false;\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tconst {logs} = this.state;\r\n\r\n\t\tconst timeDifference = performance.now() - this.state.logs[this.iteration].startTime;\r\n\t\tlogs[this.iteration].timeDifference = Math.ceil(timeDifference) / 1000;\r\n\r\n\t\tthis.timer = setTimeout(() => {\r\n\t\t\tthis.setState({logs});\r\n\t\t});\r\n\r\n\t\tclearTimeout(this.timer);\r\n\t}\r\n\r\n\tclearLogs() {\r\n\t\tthis.iteration = 0;\r\n\t\tthis.wereLogsCleared = true;\r\n\r\n\t\tthis.setState({\r\n\t\t\tlogs: [{}],\r\n\t\t});\r\n\t}\r\n\r\n\tasync getProducts(productAmount) {\r\n\t\tconst {logs} = this.state;\r\n\r\n\t\tthis.wereLogsCleared ? this.wereLogsCleared = false : this.iteration++;\r\n\t\tlogs[this.iteration] = {};\r\n\t\tlogs[this.iteration].startTime = performance.now();\r\n\t\tlogs[this.iteration].productAmount = productAmount;\r\n\t\tconst response = await axios.get(`./assets/json/data-${productAmount}.json`);\r\n\r\n\t\tthis.setState({\r\n\t\t\tlogs: logs,\r\n\t\t\tproducts: response.data.products,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {logs, products} = this.state;\r\n\r\n\t\tconst productRender = products.map((product, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t\t<div className=\"product\" key={index}>\r\n\t\t\t\t\t\t<img src={product.image}\r\n\t\t\t\t\t\t\t\t className=\"product-image\"\r\n\t\t\t\t\t\t\t\t alt=\"product-image\"/>\r\n\t\t\t\t\t\t<div className=\"product-id\">\r\n\t\t\t\t\t\t\t<span className=\"product-title\">Product ID:</span>\r\n\t\t\t\t\t\t\t<p className=\"product-content\">{product.id}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"product-name\">\r\n\t\t\t\t\t\t\t<span className=\"product-title\">Product Name:</span>\r\n\t\t\t\t\t\t\t<p className=\"product-content\">{product.name}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"product-description\">\r\n\t\t\t\t\t\t\t<span className=\"product-title\">Product Description</span>\r\n\t\t\t\t\t\t\t<p className=\"product-content\">{product.description}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t)});\r\n\r\n\t\tconst logsRender = logs.map((log, index) => {\r\n\t\t\tif ((logs.length - index) !== 1) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{log.timeDifference}</td>\r\n\t\t\t\t\t\t<td>{log.productAmount}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t)}\r\n\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<section className=\"actions\">\r\n\t\t\t\t\t<button className=\"btn btn-standard\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.getProducts(50)}>\r\n\t\t\t\t\t\tLoad 50 products\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"btn btn-standard\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.getProducts(200)}>\r\n\t\t\t\t\t\tLoad 200 products\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"btn btn-standard\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.getProducts(1000)}>\r\n\t\t\t\t\t\tLoad 1000 products\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"btn btn-standard\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.getProducts(5000)}>\r\n\t\t\t\t\t\tLoad 5000 products\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</section>\r\n\t\t\t\t<div className=\"divider\"></div>\r\n\t\t\t\t<section className=\"logs\">\r\n\t\t\t\t\t<h2 className=\"title logs-title\">Time Logs</h2>\r\n\t\t\t\t\t<button className=\"btn btn-additional\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.clearLogs()}>\r\n\t\t\t\t\t\tClear Logs\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<table className=\"logs-table\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>â„–</th>\r\n\t\t\t\t\t\t\t<th>Time spent for request (in seconds)</th>\r\n\t\t\t\t\t\t\t<th>Requested quantity of products</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{logsRender}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</section>\r\n\t\t\t\t<div className=\"divider\"></div>\r\n\t\t\t\t<section className=\"products\">\r\n\t\t\t\t\t<h2 className=\"title products-title\">Product List</h2>\r\n\t\t\t\t\t<div className=\"products-container\">\r\n\t\t\t\t\t\t{products.length ? productRender : ''}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ProductList;\r\n","import React from 'react';\nimport ProductList from \"./ProductList/ProductList\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2 className=\"app-title\">React Application</h2>\n      <ProductList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}